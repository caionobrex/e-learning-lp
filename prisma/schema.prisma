// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 5aba66f2cc35dab2a85e75529118159146fc38db - Vimeo

enum UserRole {
  USER
  ADMIN
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  firstName       String
  lastName        String
  title           String?
  picture         String?
  description     String?
  role            UserRole          @default(USER)
  posts           Post[]
  enrolledCourses EnrolledCourses[]
  Course          Course[]
  LectureProgress LectureProgress[]
}

model Course {
  id                  String                @id @default(uuid())
  name                String
  subTitle            String
  slug                String                @unique
  img                 String
  description         String
  price               Float
  discount            Int
  discountedPrice     Float
  video               String?
  instructor          User                  @relation(fields: [userId], references: [id])
  isFree              Boolean               @default(false)
  rating              Int
  duration            Int
  studentsCount       Int
  modulesCount        Int
  lecturesCount       Int
  EnrolledCourses     EnrolledCourses[]
  CoursesOnCategories CoursesOnCategories[]
  Modules             Module[]
  userId              String
  LectureProgress     LectureProgress[]
}

model Category {
  id                  String                @id @default(uuid())
  name                String
  img                 String
  studentsCount       Int
  coursesCount        Int                   @default(0)
  CoursesOnCategories CoursesOnCategories[]
}

model Module {
  id            String    @id @default(uuid())
  name          String
  description   String
  index         Int?
  duration      Int
  lecturesCount Int
  lectures      Lecture[]
  Course        Course?   @relation(fields: [courseId], references: [id])
  courseId      String?
}

model Lecture {
  id              String            @id @default(uuid())
  video           String
  duration        Int
  isFree          Boolean           @default(false)
  name            String
  thumbnail       String
  description     String
  code            ClassCode[]
  Module          Module?           @relation(fields: [moduleId], references: [id])
  moduleId        String?
  LectureProgress LectureProgress[]
}

model Testimonial {
  id      String @id @default(uuid())
  name    String
  picture String
  content String
}

model Post {
  id        String   @id @default(uuid())
  title     String
  slug      String
  summary   String
  thumb     String
  content   String
  by        User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ClassCode {
  id       String   @id @default(uuid())
  snippet  String
  starstAt Int
  endsAt   Int
  Lecture  Lecture? @relation(fields: [classId], references: [id])
  classId  String?
}

model LectureProgress {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  lectureId String
  progress  Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  updatedAt DateTime @default(now())

  @@id([userId, lectureId])
}

model CoursesOnCategories {
  course     Course   @relation(references: [id], fields: [courseId])
  courseId   String
  category   Category @relation(references: [id], fields: [categoryId])
  categoryId String

  @@id([courseId, categoryId])
}

model EnrolledCourses {
  user     User   @relation(references: [id], fields: [userId])
  userId   String
  course   Course @relation(references: [id], fields: [courseId])
  courseId String
  progress Int

  @@id([userId, courseId])
}
